{
    "title": "Array Maximum",
    "description": "<h3><strong>Problem Description</strong></h3><p>Write a program to input <em>N</em> elements of an array <em>A</em> from user and print their maximum.</p><h3><br></h3><h3><strong>Input Format</strong></h3><p>First line of input contains a single integer <em>N.</em></p><p>Second line of input contains <em>N</em> space separated integers representing elements of array.</p><p><br></p><h3><strong>Output Format</strong></h3><p>A single line of output containing maximum of given elements.</p><p><br></p><h3><strong>Constraints</strong></h3><p><span class=\"ql-formula\" data-value=\"1 \\le N \\le 50\">﻿<span contenteditable=\"false\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>50</mn></mrow><annotation encoding=\"application/x-tex\">1 \\le N \\le 50</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.78041em; vertical-align: -0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8193em; vertical-align: -0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span></span></span></span></span>﻿</span> </p><p><span class=\"ql-formula\" data-value=\"0 \\le A[i] \\le 100\">﻿<span contenteditable=\"false\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">0 \\le A[i] \\le 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.78041em; vertical-align: -0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 1em; vertical-align: -0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span>﻿</span> </p><p><br></p><p><br></p><h3><strong>Example</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">5\n8 60 85 13 77\n85\n</pre><p><br></p>",
    "supported_languages": [
        "c",
        "cpp",
        "py",
        "java",
        "js"
    ],
    "test_cases": [
        {
            "input": "1\n6",
            "output": "6",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "2\n40 72",
            "output": "72",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "3\n64 68 27",
            "output": "68",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "4\n0 88 13 26",
            "output": "88",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "5\n8 60 85 13 77",
            "output": "85",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "6\n6 66 44 100 34 34",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "7\n94 18 49 58 73 99 69",
            "output": "99",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "8\n29 92 87 76 97 91 54 65",
            "output": "97",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "9\n73 92 87 1 39 65 0 33 28",
            "output": "92",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "10\n81 78 6 40 62 70 18 72 20 62",
            "output": "81",
            "timeout": 1000,
            "score": 2,
            "locked": false
        },
        {
            "input": "11\n19 44 60 21 24 14 4 26 58 69 13",
            "output": "69",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "12\n26 59 67 44 56 91 63 81 25 75 23 80",
            "output": "91",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "13\n83 52 20 40 28 98 12 14 19 96 32 15 90",
            "output": "98",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "14\n38 26 65 32 69 77 35 60 86 98 71 40 6 85",
            "output": "98",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "15\n76 67 65 20 52 78 71 76 59 24 22 25 73 44 42",
            "output": "78",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "16\n84 29 1 1 5 75 22 65 87 13 39 18 18 20 63 99",
            "output": "99",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "17\n67 25 21 76 23 1 35 28 58 54 73 79 75 48 58 76 16",
            "output": "79",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "18\n25 72 39 77 2 97 45 77 54 60 0 14 92 11 9 93 35 85",
            "output": "97",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "19\n90 89 55 5 23 8 67 43 12 33 71 58 12 18 22 66 30 40 28",
            "output": "90",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "20\n22 77 23 70 21 12 91 38 42 68 96 92 14 70 58 1 26 69 10 38",
            "output": "96",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "21\n57 99 47 44 100 74 76 58 70 43 85 14 32 65 35 100 17 91 88 65 1",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "22\n52 72 50 23 75 15 88 78 56 61 83 92 7 53 32 14 22 79 2 46 91 67",
            "output": "92",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "23\n2 42 11 13 33 98 83 78 87 73 3 85 11 63 15 46 94 79 47 66 77 86 15",
            "output": "98",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "24\n46 50 91 14 38 93 61 53 12 10 100 35 22 83 38 11 17 28 31 15 97 81 41 58",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "25\n1 62 85 93 40 84 22 97 61 78 99 91 51 99 60 83 47 21 84 41 14 36 24 76 81",
            "output": "99",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "26\n15 92 49 85 8 86 80 62 55 62 57 57 22 6 69 26 47 43 22 47 19 74 97 51 50 39",
            "output": "97",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "27\n83 87 19 7 90 33 97 23 77 64 6 14 57 65 79 100 29 79 71 53 32 10 52 54 68 45 97",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "28\n76 88 47 18 54 39 87 15 81 18 90 76 9 2 90 4 37 88 56 39 26 5 57 78 48 81 59 14",
            "output": "90",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "29\n3 31 93 63 46 73 28 49 74 47 30 49 93 47 34 68 70 31 41 14 45 11 83 60 9 10 74 100 99",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "30\n11 76 55 36 81 37 13 78 70 64 16 6 57 35 41 69 78 56 96 47 99 3 2 100 13 65 77 82 67 46",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "31\n48 68 92 41 53 7 97 94 91 27 59 66 38 47 14 30 34 23 89 57 52 10 16 31 88 55 5 39 12 49 36",
            "output": "97",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "32\n75 75 36 57 31 2 54 2 53 67 73 28 46 44 100 58 32 63 20 42 27 33 57 100 26 53 88 39 99 91 81 10",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "33\n4 15 12 91 25 0 15 18 53 70 4 1 24 100 41 52 85 99 64 41 78 81 52 50 54 52 48 88 1 3 31 18 90",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "34\n18 52 59 67 92 71 19 30 21 66 49 67 80 47 86 79 76 100 90 90 40 75 7 92 81 0 8 92 99 48 98 83 61 44",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "35\n79 86 31 7 75 68 81 23 34 1 15 52 7 62 5 92 22 43 87 82 26 81 8 25 82 43 56 4 94 49 43 49 46 38 87",
            "output": "94",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "36\n95 86 32 60 33 25 90 28 4 9 92 80 37 47 60 66 39 98 75 8 63 59 65 22 4 25 93 32 74 83 37 59 41 100 87 58",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "37\n72 62 64 38 85 1 71 96 85 51 29 57 37 14 65 86 73 3 6 21 5 84 12 83 26 67 2 41 86 32 34 7 25 86 98 57 17",
            "output": "98",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "38\n43 54 30 25 92 29 26 93 37 59 76 15 12 14 63 75 33 29 76 35 62 3 64 21 81 49 69 49 73 54 14 38 72 38 64 45 90 10",
            "output": "93",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "39\n87 28 41 95 70 27 86 35 20 7 10 68 60 96 59 92 6 5 72 56 57 94 27 43 83 68 85 76 31 27 100 37 65 44 84 40 100 57 45",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "40\n15 92 92 19 47 22 85 20 20 78 20 90 99 62 47 8 43 53 78 20 15 36 13 36 96 23 50 85 24 22 94 19 83 13 77 4 8 56 79 72",
            "output": "99",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "41\n89 6 66 60 35 30 92 92 68 95 91 63 36 100 54 45 72 93 95 37 36 1 3 97 94 26 0 21 67 98 56 35 96 65 37 62 36 22 29 3 6",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "42\n29 70 78 48 65 46 14 47 71 17 67 40 45 73 24 69 60 77 24 24 77 65 29 70 55 40 51 53 73 81 38 58 51 91 63 44 60 64 3 17 51 85",
            "output": "91",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "43\n80 84 48 67 30 89 2 88 79 57 12 83 28 99 94 37 80 45 63 52 73 100 25 58 27 72 48 35 39 87 46 57 49 83 30 61 62 51 95 62 16 21 10",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "44\n27 27 46 45 28 79 86 5 48 37 43 30 68 22 30 76 37 41 50 46 4 54 50 52 48 100 4 5 48 36 75 26 92 100 18 16 24 63 57 74 87 4 90 35",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "45\n33 68 16 74 65 52 13 47 38 59 59 71 18 80 64 34 59 21 85 11 3 51 39 13 88 9 2 27 35 80 56 58 85 46 98 3 6 61 33 94 26 82 71 51 91",
            "output": "98",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "46\n81 27 25 100 0 32 20 80 80 57 22 54 21 76 74 17 97 18 12 85 59 58 63 33 78 99 9 62 16 95 97 59 59 92 82 14 35 12 27 19 0 23 29 87 8 3",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "47\n0 3 11 9 7 45 60 21 59 22 72 14 61 17 0 75 9 29 80 75 96 20 78 98 22 75 39 54 83 41 80 30 33 95 50 87 10 52 63 10 57 22 55 9 70 2 30",
            "output": "98",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "48\n61 38 37 78 15 39 52 39 21 58 25 15 13 48 87 53 49 100 69 92 55 71 82 43 13 100 38 55 14 29 10 6 51 90 87 50 97 88 44 47 24 62 81 23 56 17 16 7",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "49\n12 78 53 55 44 20 11 15 0 32 42 30 95 52 69 81 78 79 19 75 74 53 3 30 69 75 36 37 31 31 15 83 6 56 30 85 22 14 41 31 55 66 97 55 30 0 79 61 36",
            "output": "97",
            "timeout": 1000,
            "score": 2,
            "locked": true
        },
        {
            "input": "50\n100 70 78 41 16 62 71 37 40 2 86 63 59 4 92 73 0 49 14 13 18 63 44 7 61 76 89 63 73 64 67 43 12 49 7 18 65 3 78 95 86 53 57 54 77 4 18 24 74 69",
            "output": "100",
            "timeout": 1000,
            "score": 2,
            "locked": true
        }
    ],
    "templates": {
        "c": "#include <stdio.h>\nint main() {\n    // your code goes here\n    return 0;\n}",
        "cpp": "#include <iostream>\nusing namespace std;\nint main() {\n    // your code goes here\n    return 0;\n}",
        "py": "# your code goes here",
        "java": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        // your code goes here\n    }\n}",
        "js": "// your code goes here"
    }
}