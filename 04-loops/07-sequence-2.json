{
    "title": "Sequence 2",
    "description": "<h3><strong>Problem Description</strong></h3><p>Write a program to print first <em>N</em> elements of the sequence:</p><p>2, 4, 8, 16, 32, 64, 128, 512 ...</p><h3><br></h3><h3><strong>Input Format</strong></h3><p>A single line of input containing a single integer.</p><p><br></p><h3><strong>Output Format</strong></h3><p>A single line of output containing <em>N</em> elements of the sequence.</p><p><br></p><h3><strong>Constraints</strong></h3><p><span class=\"ql-formula\" data-value=\"1 \\le N \\le 30\">﻿<span contenteditable=\"false\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">1 \\le N \\le 30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.78041em; vertical-align: -0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8193em; vertical-align: -0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></span>﻿</span> </p><p><br></p><p><br></p><h3><strong>Example 1</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">5\n2 4 8 16 32\n</pre>",
    "supported_languages": [
        "c",
        "cpp",
        "py",
        "java",
        "js"
    ],
    "test_cases": [
        {
            "input": "1",
            "output": "2 ",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "2",
            "output": "2 4 ",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "3",
            "output": "2 4 8 ",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "4",
            "output": "2 4 8 16 ",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "5",
            "output": "2 4 8 16 32 ",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "6",
            "output": "2 4 8 16 32 64 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "7",
            "output": "2 4 8 16 32 64 128 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "8",
            "output": "2 4 8 16 32 64 128 256 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "9",
            "output": "2 4 8 16 32 64 128 256 512 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "10",
            "output": "2 4 8 16 32 64 128 256 512 1024 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "11",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "12",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "13",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "14",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "15",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "16",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "17",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "18",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "19",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "20",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "21",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "22",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "23",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "24",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "25",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "26",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "27",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "28",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "29",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "30",
            "output": "2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 ",
            "score": 2,
            "timeout": 1000,
            "locked": true
        }
    ],
    "templates": {
        "c": "#include <stdio.h>\nint main() {\n    // your code goes here\n    return 0;\n}",
        "cpp": "#include <iostream>\nusing namespace std;\nint main() {\n    // your code goes here\n    return 0;\n}",
        "py": "# your code goes here",
        "java": "public class Main {\n    public static void main(String[] args) {\n        // your code goes here\n    }\n}",
        "js": "// your code goes here"
    }
}