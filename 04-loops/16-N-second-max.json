{
    "title": "N-Second Max",
    "description": "<h3><strong>Problem Description</strong></h3><p>Write a program to input <em>N</em> integers from user and print the second largest number of all.</p><p><br></p><h3><strong>Input Format</strong></h3><p>First line of input contains a single integer <em>N</em></p><p>Next line of input contains <em>N</em> space separated integers.</p><p><br></p><h3><strong>Output Format</strong></h3><p>A single line of output containing the second largest of all numbers.</p><p><br></p><h3><strong>Constraints</strong></h3><p><span class=\"ql-formula\" data-value=\"2 \\le N \\le 100\">﻿<span contenteditable=\"false\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">2 \\le N \\le 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.78041em; vertical-align: -0.13597em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.8193em; vertical-align: -0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right: 0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span>﻿</span> </p><p><span class=\"ql-formula\" data-value=\"-100 \\le number \\le 100\">﻿<span contenteditable=\"false\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>100</mn><mo>≤</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">-100 \\le number \\le 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height: 0.78041em; vertical-align: -0.13597em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.83041em; vertical-align: -0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right: 0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right: 0.277778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span>﻿</span> </p><p><br></p><p><br></p><h3><strong>Example 1</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">5\n1 2 3 4 5\n4\n</pre>",
    "supported_languages": [
        "c",
        "cpp",
        "py",
        "java",
        "js"
    ],
    "test_cases": [
        {
            "input": "5\n1 2 3 4 5",
            "output": "4",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "5\n78 94 11 -67 -26",
            "output": "78",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "4\n83 -75 -56 -99",
            "output": "-56",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "10\n-25 34 -72 -87 59 -45 40 -1 98 50",
            "output": "59",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "3\n36 21 99",
            "output": "36",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "10\n50 -64 30 -63 78 -49 -98 89 -29 84",
            "output": "84",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "5\n65 -68 94 57 85",
            "output": "85",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "7\n60 98 16 94 39 -95 73",
            "output": "94",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "10\n66 4 -86 83 18 1 54 29 -59 -66",
            "output": "66",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "7\n-71 -19 0 -8 62 76 51",
            "output": "62",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "4\n61 65 -66 88",
            "output": "65",
            "score": 2,
            "timeout": 1000,
            "locked": false
        },
        {
            "input": "59\n-76 36 -17 -50 89 -36 -13 -75 -29 96 56 -78 97 -45 -47 80 90 -56 26 55 -28 -20 -27 61 -55 -48 38 -94 81 25 68 36 60 -41 37 18 64 62 76 -17 -24 -42 13 -78 -29 -83 87 -57 -45 81 -18 -95 16 -98 -69 -68 -49 34 85",
            "output": "96",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "80\n38 -85 73 8 68 52 -26 85 33 57 -23 9 46 96 41 95 -7 10 35 -15 7 46 5 -24 -93 55 11 77 -27 -68 48 32 68 53 35 69 -78 -26 -33 -18 -65 87 -98 0 -82 -54 41 13 99 -74 -74 44 69 -68 27 -72 -37 -77 95 -17 12 20 -91 100 -5 7 -93 -74 -19 83 -69 52 25 7 -15 -48 44 44 -78 -56",
            "output": "99",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "69\n96 -40 99 39 -78 -94 -16 57 -8 35 -87 -45 -37 49 47 88 19 98 -39 -62 -60 20 -38 -53 -90 11 62 74 -96 -85 66 -18 -26 -58 -7 69 -35 -4 -43 -15 44 -91 -33 -95 81 -2 72 71 63 29 -34 21 -31 56 -61 -1 -6 97 -23 -53 -98 -90 -3 -20 -54 71 -52 97 -31",
            "output": "98",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "4\n-42 -43 49 -73",
            "output": "-42",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "36\n9 -17 12 -57 8 95 -15 7 -61 -27 40 63 62 57 -87 65 -10 -14 -3 78 -59 36 65 78 -59 87 -71 -59 -43 -23 6 71 -64 45 22 -86",
            "output": "87",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "2\n74 -40",
            "output": "-40",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "5\n15 -2 -48 -10 25",
            "output": "15",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "7\n35 -40 54 -26 -3 36 -13",
            "output": "36",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "17\n17 -2 4 28 -37 20 22 -42 -91 99 87 97 -82 -79 -92 32 -63",
            "output": "97",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "59\n13 92 44 59 60 17 3 17 15 -90 77 9 77 -83 -71 55 22 -100 -60 -44 15 40 33 -62 -37 66 -32 54 25 -15 -16 62 -40 95 48 -32 13 56 -64 -14 -50 -61 -41 60 -79 35 66 24 55 -56 -82 66 0 55 29 -50 49 84 -55",
            "output": "92",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "18\n-35 -86 22 -84 -44 33 -8 -50 -84 -2 73 28 57 -44 -7 81 -17 -29",
            "output": "73",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "31\n-27 -61 -52 18 40 60 -42 -92 72 -90 -6 2 -59 -12 -85 -19 31 -48 94 20 -12 77 50 49 83 67 9 -44 -4 22 -75",
            "output": "83",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "64\n-77 -87 -72 26 71 96 91 73 -5 10 12 22 -60 -59 90 14 -31 90 89 -5 46 65 16 -58 66 9 90 -56 74 -27 -50 -46 -48 -85 -76 -1 88 72 0 3 39 57 82 -45 40 1 85 87 -84 -24 50 71 73 16 47 63 13 18 20 30 -21 -89 57 90",
            "output": "91",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "45\n65 -16 64 -34 -36 -83 27 -58 63 75 19 -97 -32 90 85 35 -3 -69 54 -79 -28 97 74 -77 -49 -56 -13 68 90 -47 32 -75 -69 -51 -70 -60 93 12 -72 -15 93 -4 -9 14 -91",
            "output": "93",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "4\n-88 58 40 -18",
            "output": "40",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "47\n-15 70 -68 60 -54 -21 64 63 -26 -71 -69 -81 -18 84 -46 -69 65 -100 59 -21 -86 25 92 67 68 86 71 73 -1 43 25 64 -46 62 31 56 50 -85 96 -95 -55 93 48 88 -6 89 -71",
            "output": "93",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "50\n-10 25 1 59 42 -94 -62 1 -19 43 43 9 55 70 -76 -26 -61 -83 58 33 -39 55 -87 -34 53 -73 -16 38 18 -95 -72 -99 -71 79 15 4 51 32 -42 -28 -45 8 -31 5 9 -58 71 48 -23 11",
            "output": "71",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "60\n50 -7 36 53 -44 42 -43 -22 89 -83 -48 -26 80 -94 1 100 34 42 78 20 45 -66 -54 -25 -82 -91 55 81 -31 -16 -50 87 34 -64 -88 16 -78 -58 -95 98 -72 -40 7 -50 -55 -2 -10 44 15 -37 63 -10 -82 -21 62 -39 20 -5 -98 46",
            "output": "98",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "78\n69 -92 -59 85 16 18 96 -22 -89 -57 43 -93 -31 -15 14 -95 -36 85 30 -35 76 -25 -55 1 -83 95 48 74 -59 95 27 -73 -10 3 -85 -3 67 16 -34 80 1 35 -99 -93 72 7 -97 90 98 -71 85 65 -46 -56 47 60 24 76 -66 -60 -74 -61 86 -2 83 -92 -26 -31 -61 -68 -12 29 -36 -7 74 -77 92 -78",
            "output": "96",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "91\n52 -32 42 -45 50 50 -19 -24 4 -55 8 -72 54 -97 -12 -73 -93 93 -55 13 -5 -40 47 26 -71 -31 -45 -40 -1 90 21 -94 -82 -35 -41 23 -40 -12 -27 -44 75 92 74 66 44 88 91 77 0 -40 -29 55 59 38 52 -52 5 -51 9 -98 86 99 -21 -6 -27 45 61 85 -86 94 50 17 87 32 -22 45 52 -50 -23 -2 -85 -37 -17 -52 -80 -45 65 22 -10 10 2",
            "output": "94",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "20\n-10 3 -16 45 -75 55 -76 -51 72 -84 -46 -62 -44 -66 -26 74 95 -32 8 -55",
            "output": "74",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "53\n-4 69 -6 -62 58 94 -85 94 -3 49 4 -67 -11 11 -3 53 97 -100 6 51 -56 37 -27 -74 68 -89 3 15 68 31 -67 -87 -1 93 -17 -9 -79 -64 -33 92 -63 72 -68 96 38 41 -16 -60 -10 7 56 -80 -37",
            "output": "96",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "5\n-39 47 54 -94 -13",
            "output": "47",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "7\n-51 55 100 -2 2 71 -83",
            "output": "71",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "26\n31 -22 86 97 59 -28 87 -15 53 67 75 -40 91 85 -83 50 41 -100 -76 -68 6 -71 -63 -66 -50 79",
            "output": "91",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "21\n79 -19 46 62 76 97 5 18 74 21 85 -50 57 -50 77 27 100 92 -5 13 67",
            "output": "97",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "79\n34 19 21 2 65 84 31 39 69 38 -47 -59 -77 57 -65 34 15 40 -4 61 98 34 78 27 -100 71 -32 62 93 -76 -17 65 81 -98 -98 51 -68 -87 -13 68 -35 38 -29 -66 -55 54 21 -42 -31 -42 22 -89 93 13 -56 5 -19 -14 47 77 -70 -2 -56 -15 98 -68 -24 -43 -69 12 -89 70 -19 38 100 -12 -64 57 30",
            "output": "98",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "13\n-17 -32 -24 -65 4 -63 -76 -35 -94 17 41 -98 46",
            "output": "41",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "17\n-3 66 -34 -45 -95 77 -52 21 -27 -30 -6 -18 -20 28 -70 14 53",
            "output": "66",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "47\n21 11 -77 47 -73 -60 -63 -50 45 -81 -12 22 -58 -41 55 43 82 72 -44 -11 23 59 6 16 36 -100 55 -71 -24 41 -38 -5 -43 65 -89 -57 51 88 -89 -14 -8 19 1 -89 49 49 5",
            "output": "82",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "86\n-76 0 31 65 15 -67 57 21 19 74 26 22 49 58 39 -3 24 6 61 -92 33 -98 66 -63 -6 -86 21 -62 73 -66 -25 68 70 -23 85 -3 -3 26 -53 91 -82 -66 78 85 -96 -99 -11 -10 -99 -5 -70 51 66 -73 29 -92 98 100 -78 -15 77 4 53 24 28 63 -31 -64 96 95 79 -65 68 19 38 93 -41 72 83 -32 -31 100 -95 -95 -43 -69",
            "output": "100",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "87\n-83 71 53 4 33 45 15 15 -23 -65 -78 97 -81 -51 -72 -43 -98 -90 68 20 -56 -87 -45 -48 -62 -17 20 26 16 -14 -44 49 -6 31 -43 -71 -44 -48 -15 35 79 22 36 -15 -95 -97 -90 -33 -92 -55 17 -54 -35 -9 6 -80 89 -30 -39 62 -49 100 82 -45 16 77 49 -65 -75 94 48 44 -51 69 -93 -89 17 45 -66 30 81 51 -22 -39 15 -68 -60",
            "output": "97",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "87\n-22 2 6 68 49 58 -32 99 3 -88 58 -20 -27 31 -28 38 21 48 65 99 80 17 50 -92 57 41 53 61 14 -18 -46 -12 -35 -53 -13 23 -52 93 75 10 -64 87 -20 -54 -75 -10 5 -18 77 92 64 79 29 -96 43 23 30 -30 -47 94 -48 -57 -53 -83 27 51 64 81 -49 36 20 -25 -70 -84 15 35 76 -100 -34 -52 84 60 -62 -29 -79 63 92",
            "output": "99",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "2\n-11 57",
            "output": "-11",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "70\n-88 16 -56 -40 -28 -53 -14 -54 -26 -7 -94 75 29 -47 -98 40 5 -100 -99 0 95 -77 13 90 -39 94 12 -55 -34 -51 65 19 -60 -84 -2 -14 -16 -1 29 72 -39 -63 -21 -76 52 -66 -100 -58 -90 -61 67 -40 28 -93 41 -35 -49 40 -21 11 6 2 53 49 80 39 -79 -84 39 100",
            "output": "95",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "35\n30 100 -4 -71 -32 -45 41 -12 59 -57 99 -45 40 5 19 -33 -2 60 73 42 35 -84 -9 -22 6 86 -55 -20 -30 -7 -9 83 -41 -79 -77",
            "output": "99",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "21\n-53 -23 98 63 -81 73 66 19 -77 -45 64 2 -19 53 -46 37 11 61 -3 45 -25",
            "output": "73",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "30\n21 -96 -85 15 71 -42 -4 61 98 94 90 -6 56 62 -89 -91 47 7 73 -92 12 -17 -55 -67 -4 20 -52 -33 -10 -57",
            "output": "94",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "59\n-1 -31 44 -54 96 3 79 -44 -51 86 -63 -54 -56 -23 67 -90 -99 100 79 -91 -85 33 -69 65 32 -73 54 -93 -75 36 16 -15 -15 -33 23 -3 -90 2 -85 98 59 40 -19 85 24 -22 -18 -98 86 -91 72 -82 99 62 66 -29 17 -100 39",
            "output": "99",
            "score": 2,
            "timeout": 1000,
            "locked": true
        },
        {
            "input": "79\n68 62 -23 -87 -39 -76 78 -96 45 -86 -86 -63 7 46 -33 -46 22 5 -92 42 -77 45 -56 -6 -96 -59 43 4 80 -23 -92 -50 29 -62 37 -9 -48 53 52 -49 -37 26 27 28 -28 75 99 -70 -63 17 -67 -8 52 21 -60 64 -21 19 -58 -94 0 6 70 86 -80 -24 38 -14 -25 -28 -63 -31 20 -30 54 15 23 2 42",
            "output": "86",
            "score": 2,
            "timeout": 1000,
            "locked": true
        }
    ],
    "templates": {
        "c": "#include <stdio.h>\nint main() {\n    // your code goes here\n    return 0;\n}",
        "cpp": "#include <iostream>\nusing namespace std;\nint main() {\n    // your code goes here\n    return 0;\n}",
        "py": "# your code goes here",
        "java": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        // your code goes here\n    }\n}",
        "js": "// your code goes here"
    }
}